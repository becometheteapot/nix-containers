# SPDX-FileCopyrightText: 2023 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: GLWTPL

name: build

on:
  push:

jobs:
  cache-devshell:
    runs-on: ubuntu-latest
    outputs:
      key: ${{ steps.key.outputs.key }}
    steps:
      - uses: actions/checkout@v3

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-direnv"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - name: generate cache key
        id: key
        run: |
          printf 'key=nix-devshell-%s\n' \
            ${{ hashFiles('flake.lock') }} \
            >>"$GITHUB_OUTPUT"

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: ${{ steps.key.outputs.key }}

      - name: configure nix signing key
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: cache devshell
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          sudo "$(command -v nix)" copy --to "$cache_url" '.#devShells.x86_64-linux.ci'

  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      key: ${{ steps.key.outputs.key }}
      packages: ${{ steps.build.outputs.packages }}
    steps:
      - uses: actions/checkout@v3

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-manifest"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - name: generate cache key
        id: key
        run: |
          printf 'key=nix-manifest-%s\n' \
            ${{ hashFiles('flake.lock') }} \
            >>"$GITHUB_OUTPUT"

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: ${{ steps.key.outputs.key }}

      - name: configure nix signing key
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: build manifest
        id: build
        run: |
          nix -L build '.#manifest'
          printf 'packages=%s\n' \
            "$(jq -c '. | keys' result)" \
            >>"$GITHUB_OUTPUT"

      - name: cache manifest
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: sudo "$(command -v nix)" copy --to "$cache_url" '.#manifest'

  build:
    runs-on: ubuntu-latest
    needs:
      - cache-devshell
      - gen-matrix
    outputs:
      key: ${{ steps.key.outputs.key }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.gen-matrix.outputs.packages) }}
    steps:
      - uses: actions/checkout@v3

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - name: generate cache key
        id: key
        run: |
          printf 'key=nix-%s-%s\n' \
            ${{ matrix.package }} \
            ${{ hashFiles('flake.lock') }} \
            >>"$GITHUB_OUTPUT"

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: ${{ steps.key.outputs.key }}

      - uses: actions/cache/restore@v3
        with:
          path: ${{ runner.temp }}/cache-direnv
          key: ${{ needs.cache-devshell.outputs.key }}
          fail-on-cache-miss: true

      - name: configure nix signing key
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }} file://${{ runner.temp }}/cache-direnv
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: setup nix devshell
        run: |
          printf "%s/bin\n" \
            "$(nix -L build --no-link --print-out-paths .#devShells.x86_64-linux.ci)" \
             >>"$GITHUB_PATH"

      - name: build
        run: redo -j$(nproc) ctrs/${{ matrix.package }}.stream

      - if: ${{ steps.cache-nix.outputs.cache-hit != 'true' }}
        name: cache nix artifacts
        run: |
          sudo "$(command -v nix)" copy --to "$cache_url" '.#${{ matrix.package }}'

      - if: ${{ github.event_type == 'workflow_call' }}
        uses: actions/upload-artifact@v3
        with:
          name: build-binary-cache
          path: ${{ env.cache_dir }}
