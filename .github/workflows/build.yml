# SPDX-FileCopyrightText: 2023 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: GLWTPL

name: build

permissions:
  packages: write

on:
  push:

jobs:
  cache-devshell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-direnv"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: nix-devshell-${{ hashFiles('flake.lock') }}

      - name: configure nix signing key
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: cache devshell
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          sudo "$(command -v nix)" copy --to "$cache_url" '.#devShells.x86_64-linux.ci'

  gen-matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-manifest"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - name: generate cache key
        id: key
        run: |
          printf 'key=nix-manifest-%s\n' \
            ${{ hashFiles('flake.lock') }} \
            >>"$GITHUB_OUTPUT"

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: nix-devshell-${{ hashFiles('flake.lock') }}

      - name: configure nix signing key
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: build manifest
        run: nix -L build '.#manifest'

      - name: cache manifest
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: sudo "$(command -v nix)" copy --to "$cache_url" '.#manifest'

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: save cache_url
        run:
          printf 'CACHE_URL=file://${{ runner.temp }}/cache?compression=zstd&parallel-compression=true\n' \
            >>"$GITHUB_ENV"

      - name: configure nix signing key
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: actions/cache/restore@v3
        id: cache-nix
        with:
          key: ${{ hashFiles('flake.lock') }}-v1
          path: ${{ runner.temp }}/cache

      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.CACHE_URL }}
            extra-trusted-substituters = ${{ env.CACHE_URL }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: setup nix devshell
        run: |
          printf "%s/bin\n" \
            "$(nix -L build --no-link --print-out-paths .#devShells.x86_64-linux.ci)" \
             >>"$GITHUB_PATH"

      - name: build
        run: redo -j$(nproc)

      - if: ${{ steps.cache-nix.outputs.cache-hit != 'true' }}
        name: cache nix artifacts
        run: |
          {
            printf 'devShells.x86_64-linux.ci\n'
            cut -d$'\t' -f1 manifest
          } | sed 's/^/.#/' \
            | xargs -r sudo $(command -v nix) copy --to "$CACHE_URL"

      - if: ${{ steps.cache-nix.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3
        with:
          key: ${{ steps.cache-nix.outputs.cache-primary-key }}
          path: ${{ runner.temp }}/cache

      - if: ${{ false }}
        name: push to ghcr
        env:
          REGISTRY: ghcr.io
          ORG: ${{ github.repository_owner }}
        run: |
          skopeo login \
            --username "${{ github.actor }}" \
            --password-stdin \
            "${REGISTRY:?}" \
            <<< "${{ secrets.GITHUB_TOKEN }}"

          redo -j$(nproc) pushs
