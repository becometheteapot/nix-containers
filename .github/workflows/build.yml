# SPDX-FileCopyrightText: 2023 - 2024 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: GLWTPL

name: build

permissions:
  packages: write

on:
  schedule:
    - cron: 29 3 * * *  # 03:29 daily
  push:
    branches:
      - '**'
  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: >-
    ${{ github.workflow }}-
    ${{ github.ref_name == 'main'
      && github.ref
      || github.sha }}

env:
  cache-ver: 1

jobs:
  cache-devshell:
    runs-on: ubuntu-latest
    outputs:
      cache-ver: ${{ env.cache-ver }}
    steps:
      - uses: actions/checkout@v4

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-direnv"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: nix-devshell-${{ hashFiles('flake.lock') }}-v${{ env.cache-ver }}

      - name: configure nix signing key
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: cache devshell
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          sudo "$(command -v nix)" -v copy --to "$cache_url" '.#devShells.x86_64-linux.ci'

  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.build.outputs.packages }}
    steps:
      - uses: actions/checkout@v4

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-manifest"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: nix-manifest-${{ hashFiles('flake.lock') }}-v${{ env.cache-ver }}

      - name: configure nix signing key
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }}
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: build manifest
        id: build
        run: |
          nix -L build '.#manifest'
          printf 'packages=%s\n' \
            "$(jq -c '. | keys' result)" \
            >>"$GITHUB_OUTPUT"

      - name: cache manifest
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          sudo "$(command -v nix)" -v copy --to "$cache_url" '.#manifest'

  build:
    runs-on: ubuntu-latest
    needs:
      - cache-devshell
      - gen-matrix
    strategy:
      matrix:
        package: ${{ fromJSON(needs.gen-matrix.outputs.packages) }}
    steps:
      - uses: actions/checkout@v4

      - name: save cache url
        run: |
          cache_dir="${{ runner.temp }}/cache-${{ matrix.package }}"
          cache_url="file://$cache_dir?compression=zstd&parallel-compression=true"
          printf 'cache_dir=%s
          cache_url=%s
          ' "$cache_dir" "$cache_url" >>"$GITHUB_ENV"

      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.cache_dir }}
          key: nix-${{ matrix.package }}-${{ hashFiles('flake.lock') }}-v${{ env.cache-ver }}

      - uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/cache-direnv
          key: nix-devshell-${{ hashFiles('flake.lock') }}-v${{ env.cache-ver }}
          fail-on-cache-miss: true

      - name: configure nix signing key
        run: |
          printf '${{ secrets.NIX_SECRET_KEY }}\n' >>"$RUNNER_TEMP"/secret-key

      - uses: DeterminateSystems/nix-installer-action@v4
        with:
          extra-conf: |
            secret-key-files = ${{ runner.temp }}/secret-key
            extra-substituters = ${{ env.cache_url }} file://${{ runner.temp }}/cache-direnv
            extra-trusted-public-keys = ${{ vars.NIX_PUBLIC_KEY }}

      - name: setup nix devshell
        run: |
          printf "%s/bin\n" \
            "$(nix -L build --no-link --print-out-paths .#devShells.x86_64-linux.ci)" \
             >>"$GITHUB_PATH"

      - name: build
        run: redo -j$(nproc) ctrs/${{ matrix.package }}.stream

      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        continue-on-error: true
        name: cache nix artifacts
        run: |
          sudo "$(command -v nix)" -v copy --to "$cache_url" '.#${{ matrix.package }}'

      - name: push to ghcr
        if: >-
          ${{
            github.ref_name == 'main'
            && github.event_name != 'schedule'
          }}
        env:
          REGISTRY: ghcr.io
          ORG: ${{ github.repository_owner }}
        run: |
          skopeo login \
            --username "${{ github.actor }}" \
            --password-stdin \
            "${REGISTRY:?}" \
            <<< "${{ secrets.GITHUB_TOKEN }}"

          redo -j$(nproc) ctrs/${{ matrix.package }}.push

      - name: cache nix artifacts
        continue-on-error: true
        if: >-
          ${{
            github.ref_name == 'main'
            && github.event_name != 'schedule'
            && steps.cache.outputs.cache-hit != 'true'
          }}
        run: |
          json="$(grep -Eo '[^ ]*\.json' ctrs/${{ matrix.package }}.stream)"
          jq -er \
            '.store_layers | flatten | .[]' \
            "${json:?}" \
            | xargs -r sudo "$(command -v nix)" -v copy --to "$cache_url"

  success:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build
    steps:
      - name: success
        run: |
          jq -e 'length > 0 and all(. == "success")' <<-EOF
            ${{ toJson(needs.*.result) }}
          EOF
