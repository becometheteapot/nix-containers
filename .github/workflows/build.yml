# SPDX-FileCopyrightText: 2023 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: GLWTPL

name: build

permissions:
  packages: write

on:
  schedule:
    - cron: 29 3 * * *  # 03:29 daily
  push:
    branches:
      - '**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.build.outputs.packages }}
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@v4
      - uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: build manifest
        id: build
        run: |
          nix -L build '.#manifest'
          printf 'packages=%s\n' \
            "$(jq -c '. | keys' result)" \
            >>"$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs:
      - gen-matrix
    strategy:
      matrix:
        package: ${{ fromJSON(needs.gen-matrix.outputs.packages) }}
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@v4
      - uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: setup nix devshell
        run: |
          printf "%s/bin\n" \
            "$(nix -L build --no-link --print-out-paths .#devShells.x86_64-linux.ci)" \
             >>"$GITHUB_PATH"

      - name: build
        run: redo -j$(nproc) ctrs/${{ matrix.package }}.stream

      - name: push to ghcr
        if: >-
          ${{
            github.ref_name == 'main'
            && github.event_name != 'schedule'
          }}
        env:
          REGISTRY: ghcr.io
          ORG: ${{ github.repository_owner }}
        run: |
          skopeo login \
            --username "${{ github.actor }}" \
            --password-stdin \
            "${REGISTRY:?}" \
            <<< "${{ secrets.GITHUB_TOKEN }}"

          redo -j$(nproc) ctrs/${{ matrix.package }}.push

  success:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build
    steps:
      - name: success
        run: |
          jq -e 'length > 0 and all(. == "success")' <<-EOF
            ${{ toJson(needs.*.result) }}
          EOF
